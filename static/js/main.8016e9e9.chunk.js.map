{"version":3,"sources":["components/ImageCard/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","props","react_default","a","createElement","className","alt","name","src","image","onClick","isClicked","clicked","id","Wrapper","class","href","onAnimationEnd","anim","text","score","topScore","concat","children","shuffle","i","length","j","Math","floor","random","_ref","images","App","state","animEnd","_this","setState","boolean","map","element","_this2","this","components_Wrapper","components_ImageCard","key","imageSrc","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8016e9e9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction ImageCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img\n          alt={props.name}\n          src={props.image}\n          onClick={() => {\n            props.isClicked(props.clicked, props.id);\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default ImageCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return (\n    <div className=\"container-fluid\">\n      <nav class=\"navbar fixed-top navbar-light bg-light\">\n        <a className=\"title\" href=\"/\">\n          <i class=\"fas fa-dice\" />\n          &nbsp; Clicky Game\n        </a>\n        <div className={props.class} onAnimationEnd={props.anim}>\n          {props.text}\n        </div>\n        <div>\n          <span>Score: {props.score}</span> |\n          <span> Top score: {props.topScore}</span>\n        </div>\n      </nav>\n      <div className=\"bg\">\n        <h2>Clicky Game!</h2> Click on an image to earn points, but don't click\n        on any more than once!\n      </div>\n      <div className={`wrapper ${props.class}`}>{props.children}</div>\n      <div className=\"footer\">\n        <a href=\"https://github.com/ksemal/Clicky-Game\">\n          <i class=\"fab fa-github-square\" /> KM\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport images from \"./images.json\";\nimport ImageCard from \"./components/ImageCard\";\nimport Wrapper from \"./components/Wrapper\";\nshuffle(images);\nclass App extends Component {\n  state = {\n    images: images,\n    score: 0,\n    topScore: 0,\n    text: \"Click an image to begin!\",\n    class: \"\"\n  };\n  animEnd = () => {\n    this.setState({\n      class: \"\"\n    });\n  };\n  isClicked = (boolean, id) => {\n    if (boolean) {\n      this.state.images.map(element => {\n        return (element.clicked = false);\n      });\n      shuffle(this.state.images);\n      this.setState({\n        images: images,\n        score: 0,\n        topScore: this.state.score,\n        text: \"You guessed incorrectly!\",\n        class: \"incorrect\"\n      });\n    } else {\n      this.state.images.map(element => {\n        if (element.id === id) {\n          element.clicked = true;\n        }\n        return element;\n      });\n      shuffle(this.state.images);\n      this.setState({\n        images: images,\n        score: this.state.score + 1,\n        text: \"You guessed correctly!\",\n        class: \"correct\"\n      });\n    }\n  };\n  render() {\n    return (\n      <Wrapper\n        score={this.state.score}\n        topScore={this.state.topScore}\n        text={this.state.text}\n        class={this.state.class}\n        anim={this.animEnd}\n      >\n        {this.state.images.map(image => {\n          return (\n            <ImageCard\n              key={image.id}\n              id={image.id}\n              image={image.imageSrc}\n              name={image.name}\n              clicked={image.clicked}\n              isClicked={this.isClicked}\n            />\n          );\n        })}\n      </Wrapper>\n    );\n  }\n}\n\nfunction shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}